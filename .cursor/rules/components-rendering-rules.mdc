---
description: 
globs: src/components/resume/rendering/**
alwaysApply: false
---
# /src/components/resume/rendering/ 规则

参考架构文档: [architecture.md](mdc:docs/architecture.md)
父级规则: [components-resume-rules.mdc](mdc:.cursor/rules/components-resume-rules.mdc)

此目录存放**原子渲染组件 (Atomic Rendering Components)**。它们是简历渲染的基石。

## 核心原则

1.  **通过角色消费数据**:
    -   渲染组件**必须**通过 `pickFieldByRole(item, 'some-role', roleMap)` 工具函数来按其语义角色获取数据。
    -   **严禁**直接通过 `item.fields.find(f => f.key === 'some_specific_id')` 的方式硬编码查找字段。这是为了保证组件的完全解耦和可复用性。

2.  **单一渲染职责**:
    -   每一个组件都只负责**一种**渲染逻辑。例如，[BadgeListComponent.tsx](mdc:src/components/resume/rendering/BadgeListComponent.tsx) 只负责将一个字符串列表渲染成一排徽章。`TitledBlockComponent` 只负责将一个项目渲染成带有标题、副标题、日期和描述的块。
    -   组件命名应直接反映其渲染逻辑，例如 `ComponentNameComponent`。

3.  **绝对纯粹和无状态**:
    -   这些组件必须是**纯函数组件**。它们仅依赖于传入的 `props` 来渲染，内部不应包含任何 `useState` 或 `useEffect` 等 hooks。
    -   它们是"无知"的，不了解任何关于 `ResumeData` 或 `Schema` 的上下文。

4.  **通用且可复用**:
    -   组件的 `props` 接口应尽可能通用，接收简单的数据结构（如 `string[]`, `{ title: string, description: string }`），而不是整个 `section` 或 `resume` 对象。
    -   这确保了它们可以被任何模板（`templates/`）在任何上下文下调用，以渲染任何兼容的数据。

5.  **禁止布局逻辑**:
    -   这些组件**绝对不能**包含任何与整体页面布局相关的逻辑，如边距、定位或多列布局。布局是**模板（`templates/`）**的唯一职责。
    -   它们可以包含自身的内部样式（如徽章的颜色、卡片的内边距），但不能影响外部布局。

